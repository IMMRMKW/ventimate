esphome:
  name: esphome-web-79a218
  friendly_name: My Only Fan
  includes:
    - components/airpurifier/airpurifier.h

  # libraries:
  # - D:\github\my_component1\components\airpurifier
   
  #- "Wire"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "Hcbp/oa8VWQlhAf43Wk14DNFKqqNPyOP2ZOKlPQNpNg="

ota:


wifi:
  id: esp_wifi
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-79A218"
    password: "bJhPXchn93Ux"

captive_portal:





  ##### USB Power Delivery #####
external_components:
  #- source:
  #    type: git
  #    url: https://github.com/IMMRMKW/esphome-usb-powerdelivery.git
  #    ref: main
  #  components: fusb302
  #  refresh: 10s
  - source:
      type: local
      path: components
      #components: [ my_component1, calibrated_CO2 ]
 # - source:
 #     type: git
 #     url: https://github.com/IMMRMKW/my_component1.git
 #     ref: main
 #   components: [ my_component1, calibrated_CO2 ] 
 #   refresh: 10s

fusb302:
  setup_priority: 900
  maximum_supply_voltage: 9v
  interrupt_pin: GPIO36
  
  

    

##### Hardware ports #####

# For BME280/BME680 and other retrofitted sensor
i2c:

# For OLED display
#spi:
#  clk_pin: GPIO18
#  mosi_pin: GPIO23


uart:
# For PMS5003 particle sensor
  - id: PMS_uart
    tx_pin: GPIO17
    rx_pin: GPIO16
    baud_rate: 9600

# For MH-Z19C CO2 sensor
#  - id: MHZ19_uart
#    tx_pin: GPIO25
#    rx_pin: GPIO26
#    baud_rate: 9600



##### Sensors #####

bme680_bsec:
    # i2c address
    # -----------
    # Common values are:
    # - 0x76
    # - 0x77
    # Default: 0x76
    address: 0x77

    # Temperature offset
    # ------------------
    # Useful if device is in enclosure and reads too high
    # Default: 0
    temperature_offset: 0

    # IAQ calculation mode
    # --------------------
    # Available options:
    # - static (for fixed position devices)
    # - mobile (for on person or other moveable devices)
    # Default: static
    iaq_mode: static

    # Sample rate
    # -----------
    # This controls the sampling rate for gas-dependant sensors and will govern the interval
    # at which the sensor heater is operated.
    # By default this rate will also be used for temperature, pressure and humidity sensors
    # but these can be overridden on a per-sensor level if required.
    #
    # Available options:
    # - lp (low power - samples every 3 seconds)
    # - ulp (ultra low power - samples every 5 minutes)
    # Default: lp
    sample_rate: lp

    # Interval at which to save BSEC state
    # ------------------------------------
    # Default: 6h
    state_save_interval: 6h

aqdisplay:
  id: aqmonitor
  chip_select_pin: GPIO5
  dc_pin: GPIO19
  reset_pin: GPIO4
  sensor_co2: scd4x_co2
  sensor_pm_1_0: pmsx003_pm01
  sensor_pm_2_5: pmsx003_pm25
  sensor_pm_10: pmsx003_pm10
  sensor_voc: bvoc
  sensor_rh: bme680_humidity
  sensor_temp: bme680_temperature
  sensor_fan_power: current_power
  clock: esptime
  network: esp_wifi




airpurifier:
- platform: myfan
  id: fancyfan
  power_enable_pin: GPIO33
  power_pwm_pin: GPIO2
  #fan_pwm_pin: GPIO32
  min_voltage: 3.6
  purge_interval: 30
  purge_duration: 10
  power_sensor:
    name: "Current power"
    id: current_power
  switcher:
    name: "manual/auto"
    id: myfanSwitch
    optimistic: true
    on_turn_on:
      then:
        - lambda: |-
            id(fancyfan).set_manual(true);
    # on_turn_off:
    #   then:
    #     - lambda: |-
    #         id(fancyfan).set_manual(false);
  max_pwm:
    name: "Max power"
    id: myfanSlider
    min_value: 1
    max_value: 100
    step: 1
    initial_value: 100
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(fancyfan).set_max_power(x); 
               
switch:
  - platform: gpio
    pin: 
      number: GPIO12
    id: pms_set
    name: "Start measuring PM concentrations"
    internal: true # Don't expose this switch to enable manually


  #override:
  #switch:
  #  id: relay
  #  - platform: override_switch
  #
  # sensor_iaq: iaq
  #  sensor_pm_1_0: pmsx003_pm01
  #  sensor_pm_2_5: pmsx003_pm25
  #  sensor_pm_10: pmsx003_pm10

sensor:
  - platform: aqi
    id: air_quality_index
    sensor_co2: scd4x_co2
    sensor_pm_1_0: pmsx003_pm01
    sensor_pm_2_5: pmsx003_pm25
    sensor_pm_10: pmsx003_pm10
    sensor_voc: bvoc
    co2_index:
      name: "CO2 index"
      id: co2_index
    pm_index:
      name: "PM index"
      id: pm_index
    voc_index:
     name: "VOC index"
     id: voc_index

  #- platform: calibrated_CO2
  #  sensor: scd4x_co2
  #  default_outdoor_co2: 425
  #  get_co2_online: True
  #  co2: 
  #    name: "calibrated_CO2"
  #    id: CO2

  - platform: bme680_bsec
    temperature:
      # Temperature in °C
      name: "BME680 Temperature"
      id: bme680_temperature
      sample_rate: lp
      filters:
        - median
    pressure:
      # Pressure in hPa
      name: "BME680 Pressure"
      id: bme680_pressure
      sample_rate: lp
      filters:
        - median
    humidity:
      # Relative humidity %
      name: "BME680 Humidity"
      id: bme680_humidity
      sample_rate: lp
      filters:
        - median
    gas_resistance:
      # Gas resistance in Ω
      name: "BME680 Gas Resistance"
      internal: true
      filters:
        - median
    iaq:
      # Indoor air quality value
      name: "BME680 IAQ"
      id: iaq
      filters:
        - median
    iaq_accuracy:
      # IAQ accuracy as a numeric value of 0, 1, 2, 3
      name: "BME680 Numeric IAQ Accuracy"
      internal: true
    co2_equivalent:
      # CO2 equivalent estimate in ppm
      name: "BME680 CO2 Equivalent"
      internal: true
      filters:
        - median
    breath_voc_equivalent:
      # Volatile organic compounds equivalent estimate in ppm
      id: bvoc
      name: "BME680 Breath VOC Equivalent"
      internal: false
      filters:
        - median

  - platform: scd4x
    address: 0x62
    temperature_offset: 3
    update_interval: 5s
    temperature: 
      name: SCD4x Temperature
      internal: true
    humidity:
      name: SCD4x Humidity
      internal: true
    co2: 
      name: SCD4x CO2
      id: scd4x_co2
      internal: true
      

  - platform: pmsx003
    uart_id: PMS_uart
    type: PMSX003
    pm_1_0:
      name: "PM < 1.0 µm"
      id: pmsx003_pm01
    pm_2_5:
      name: "PM < 2.5 µm"
      id: pmsx003_pm25
    pm_10_0:
      name: "PM < 10.0 µm"
      id: pmsx003_pm10

  #- platform: mhz19
  #  uart_id: MHZ19_uart
  #  co2:
  #    name: "MH-Z19 CO2"
  #  temperature:
  #    name: "MH-Z19 Temperature"
  #  update_interval: 60s
  #  automatic_baseline_calibration: false
    
  # Reports RPM by pulse_counter
  #- platform: pulse_counter
  #  pin: GPIO34
  #  name: Fan Speed
  #  unit_of_measurement: 'RPM'
  #  filters:
  #    - multiply: 0.5
      #- lambda: |-
      #    if (x <= 1500) return x;
      #    else return {};
  #  count_mode:
  #    rising_edge: INCREMENT
  #    falling_edge: DISABLE
  #  update_interval: 5s
  
text_sensor:
  - platform: bme680_bsec
    iaq_accuracy:
      # IAQ accuracy as a text value of Stabilizing, Uncertain, Calibrating, Calibrated
      name: "BME680 IAQ Accuracy"
      internal: true
  - platform: template
    name: "BME680 IAQ Classification"
    id: iaq_classification
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if ( int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"Error"};
      }



##### Outputs #####

output:
  # Heartbeat status LED
  - platform: gpio
    id: statusLED
    pin: GPIO27
# Uncomment the following if you are using a 4-pin fan (fan with PWM control). Comment when using a 3-pin fan.
#  - platform: gpio
#    id: fanpwr
#    pin: GPIO02

# Uncomment the following if you are using a 3-pin fan (fan without PWM control). Comment when using a 4-pin fan.
  # - platform: ledc
  #   pin: GPIO02 # When using 3-pin fan, set to GPIO02. When using a 4-pin fan, set to GPIO32.
  #   id: fanpwm
  #   frequency: 50000
  #   channel: 0
  #   zero_means_zero: True

#    min_power: 0.30
#    max_power: 0.99


##### Actuators #####

# fan:
#   - platform: speed
#     output: fanpwm
#     name: Fan
# #    speed_count: 10
#     ################### EDIT FOR AUTOMATIC CONTROL OF FAN
#     on_turn_on:
#       - output.set_level:
#           id: fanpwm
#           level: 100%
    #on_turn_off:
    #  - output.turn_off: fan_supply
    #  - logger.log: "Power of Fan turned OFF"
    #  - delay: 1s
    #  - logger.log: "Write 100% to output pwmfan"
    #  - output.set_level:
    #      id: pwmfan
    #      level: 100%


#  - platform: gpio
#    pin: 
#      number: GPIO33
#    id: fan_en
#    name: "fan en"
#    internal: false # Don't expose this switch to enable manually

#climate:
#  - platform: pid
#    name: "PI Fan Controller"
#    sensor: iaq # Controlling on IAQ value as provided by Bosch BME680 sensor framework
#    default_target_temperature: 100 # Everything below 100 is defined as good air quality. Setting lower means the fan will blow faster, longer and louder
#    cool_output: fanpwm
#    control_parameters:
#      # Calculate PI controller parameters using room volume and filter and fan properties
#      # Vroom = Room/container volume in m^3: 10
#      # Qmax = Maximum fan volume flow in m^3/h: 100
#      # Effectivity of (HEPA) filter to remove particles, matter or substance from a forced air flow: 0.1
#      # Targeted duration in hours to reach setpoint value (a longer duration means a slower and quieter running fan): 12
#      kp: 0.0416 # 0.5*Vroom / (timeconstant * Qmax * filtereffect)
#      ki: 0.00000193 # kp / tauI = 0.5*Vroom / (timeconstant * Qmax * filtereffect) / (timeconstant * 1800)
#      output_averaging_samples: 1      # No smoothing
#    visual:
#      min_temperature: 10
#      max_temperature: 350
#      temperature_step: 10
#    #deadband_parameters:
#    #  threshold_high: 10
#    #  threshold_low: -10

##### Visualization #####



      

# color:
#   - id: color_white
#     hex: ffffff
#   - id: color_green
#     hex: 7cfc00
#   - id: color_orange
#     hex: ffd000
#   - id: color_red
#     hex: bc3a3a

##### General #####

time:
  - platform: homeassistant
    id: esptime





interval:
  - interval: 120s
    then:
      - switch.turn_on: pms_set
      - delay: 20s
      - switch.turn_off: pms_set
  - interval: 1000ms
    then:
      - output.turn_on: statusLED
      - delay: 500ms
      - output.turn_off: statusLED

    
    