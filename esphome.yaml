esphome:
  name: esphome-web-79a218
  friendly_name: My Only Fan
  libraries:
  - "Wire"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "8hsPVI8r6Bror9PMHgXt9Koxrnh3rYHjxGKVa/m/AQE="

ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-79A218"
    password: "bJhPXchn93Ux"

captive_portal:

  ##### USB Power Delivery #####
external_components:
  - source:
      type: git
      url: https://github.com/IMMRMKW/esphome-usb-powerdelivery.git
      ref: main
    components: fusb302
    refresh: 10s
  - source:
      type: local
      path: D:\github\my_component1

my_component1:
  iaq_accuracy: 10
  update_interval: 120s

fusb302:
  maximum_supply_voltage: 9v
  interrupt_pin: GPIO36
  
  

    

##### Hardware ports #####

# For BME280/BME680 and other retrofitted sensor
i2c:

# For OLED display
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23


uart:
# For PMS5003 particle sensor
  - id: PMS_uart
    tx_pin: GPIO17
    rx_pin: GPIO16
    baud_rate: 9600

# For MH-Z19C CO2 sensor
#  - id: MHZ19_uart
#    tx_pin: GPIO25
#    rx_pin: GPIO26
#    baud_rate: 9600



##### Sensors #####

bme680_bsec:
    # i2c address
    # -----------
    # Common values are:
    # - 0x76
    # - 0x77
    # Default: 0x76
    address: 0x77

    # Temperature offset
    # ------------------
    # Useful if device is in enclosure and reads too high
    # Default: 0
    temperature_offset: 5.3

    # IAQ calculation mode
    # --------------------
    # Available options:
    # - static (for fixed position devices)
    # - mobile (for on person or other moveable devices)
    # Default: static
    iaq_mode: static

    # Sample rate
    # -----------
    # This controls the sampling rate for gas-dependant sensors and will govern the interval
    # at which the sensor heater is operated.
    # By default this rate will also be used for temperature, pressure and humidity sensors
    # but these can be overridden on a per-sensor level if required.
    #
    # Available options:
    # - lp (low power - samples every 3 seconds)
    # - ulp (ultra low power - samples every 5 minutes)
    # Default: lp
    sample_rate: lp

    # Interval at which to save BSEC state
    # ------------------------------------
    # Default: 6h
    state_save_interval: 6h

sensor:
  - platform: bme680_bsec
    temperature:
      # Temperature in °C
      name: "BME680 Temperature"
      id: bme680_temperature
      sample_rate: lp
      filters:
        - median
    pressure:
      # Pressure in hPa
      name: "BME680 Pressure"
      id: bme680_pressure
      sample_rate: lp
      filters:
        - median
    humidity:
      # Relative humidity %
      name: "BME680 Humidity"
      id: bme680_humidity
      sample_rate: lp
      filters:
        - median
    gas_resistance:
      # Gas resistance in Ω
      name: "BME680 Gas Resistance"
      filters:
        - median
    iaq:
      # Indoor air quality value
      name: "BME680 IAQ"
      id: iaq
      filters:
        - median
    iaq_accuracy:
      # IAQ accuracy as a numeric value of 0, 1, 2, 3
      name: "BME680 Numeric IAQ Accuracy"
    co2_equivalent:
      # CO2 equivalent estimate in ppm
      name: "BME680 CO2 Equivalent"
      filters:
        - median
    breath_voc_equivalent:
      # Volatile organic compounds equivalent estimate in ppm
      name: "BME680 Breath VOC Equivalent"
      filters:
        - median

  - platform: scd4x
    address: 0x62
    temperature_offset: 3
    temperature: 
      name: SCD4x Temperature
    humidity:
      name: SCD4x Humidity
    co2: 
      name: SCD4x CO2
      id: scd4x_co2

  - platform: pmsx003
    uart_id: PMS_uart
    type: PMSX003
    pm_1_0:
      name: "PM < 1.0 µm"
      id: pmsx003_pm01
    pm_2_5:
      name: "PM < 2.5 µm"
      id: pmsx003_pm25
    pm_10_0:
      name: "PM < 10.0 µm"
      id: pmsx003_pm10

  #- platform: mhz19
  #  uart_id: MHZ19_uart
  #  co2:
  #    name: "MH-Z19 CO2"
  #  temperature:
  #    name: "MH-Z19 Temperature"
  #  update_interval: 60s
  #  automatic_baseline_calibration: false
    
  # Reports RPM by pulse_counter
  #- platform: pulse_counter
  #  pin: GPIO34
  #  name: Fan Speed
  #  unit_of_measurement: 'RPM'
  #  filters:
  #    - multiply: 0.5
      #- lambda: |-
      #    if (x <= 1500) return x;
      #    else return {};
  #  count_mode:
  #    rising_edge: INCREMENT
  #    falling_edge: DISABLE
  #  update_interval: 5s
  
light:
  - platform: neopixelbus
    type: GRBW
    variant: SK6812
    pin: GPIO26
    num_leds: 12
    name: "rgb_lights"
    id: rgb_lights
    gamma_correct: 1.5
    on_turn_on:
      then:
        - light.turn_on:
            id: rgb_lights
            brightness: 100%
            red: 100%
            green: 43%
            blue: 29%
            white: 100%




text_sensor:
  - platform: bme680_bsec
    iaq_accuracy:
      # IAQ accuracy as a text value of Stabilizing, Uncertain, Calibrating, Calibrated
      name: "BME680 IAQ Accuracy"
  
  - platform: template
    name: "BME680 IAQ Classification"
    id: iaq_classification
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if ( int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"Error"};
      }



##### Outputs #####

output:
  # Heartbeat status LED
  - platform: gpio
    id: statusLED
    pin: GPIO27
# Uncomment the following if you are using a 4-pin fan (fan with PWM control). Comment when using a 3-pin fan.
#  - platform: gpio
#    id: fanpwr
#    pin: GPIO02

# Uncomment the following if you are using a 3-pin fan (fan without PWM control). Comment when using a 4-pin fan.
  - platform: ledc
    pin: GPIO02 # When using 3-pin fan, set to GPIO02. When using a 4-pin fan, set to GPIO32.
    id: fanpwm
    frequency: 50000
    channel: 0
    zero_means_zero: True

#    min_power: 0.30
#    max_power: 0.99


##### Actuators #####

fan:
  - platform: speed
    output: fanpwm
    name: Fan
#    speed_count: 10
    ################### EDIT FOR AUTOMATIC CONTROL OF FAN
    on_turn_on:
      - output.set_level:
          id: fanpwm
          level: 100%
    #on_turn_off:
    #  - output.turn_off: fan_supply
    #  - logger.log: "Power of Fan turned OFF"
    #  - delay: 1s
    #  - logger.log: "Write 100% to output pwmfan"
    #  - output.set_level:
    #      id: pwmfan
    #      level: 100%

switch:
  - platform: gpio
    pin: 
      number: GPIO12
    id: pms_set
    name: "Start measuring PM concentrations"
    internal: true # Don't expose this switch to enable manually
  - platform: gpio
    pin: 
      number: GPIO33
    id: fan_en
    name: "fan en"
    internal: false # Don't expose this switch to enable manually

#climate:
#  - platform: pid
#    name: "PI Fan Controller"
#    sensor: iaq # Controlling on IAQ value as provided by Bosch BME680 sensor framework
#    default_target_temperature: 100 # Everything below 100 is defined as good air quality. Setting lower means the fan will blow faster, longer and louder
#    cool_output: fanpwm
#    control_parameters:
#      # Calculate PI controller parameters using room volume and filter and fan properties
#      # Vroom = Room/container volume in m^3: 10
#      # Qmax = Maximum fan volume flow in m^3/h: 100
#      # Effectivity of (HEPA) filter to remove particles, matter or substance from a forced air flow: 0.1
#      # Targeted duration in hours to reach setpoint value (a longer duration means a slower and quieter running fan): 12
#      kp: 0.0416 # 0.5*Vroom / (timeconstant * Qmax * filtereffect)
#      ki: 0.00000193 # kp / tauI = 0.5*Vroom / (timeconstant * Qmax * filtereffect) / (timeconstant * 1800)
#      output_averaging_samples: 1      # No smoothing
#    visual:
#      min_temperature: 10
#      max_temperature: 350
#      temperature_step: 10
#    #deadband_parameters:
#    #  threshold_high: 10
#    #  threshold_low: -10

##### Visualization #####

display:
  - platform: ssd1331_spi
    reset_pin: GPIO04
    cs_pin: GPIO05
    dc_pin: GPIO19
    lambda: |-
      int color = 1;

      // Determine font color
      if ( int(id(iaq).state) <= 50) {
        color = 1;
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        color = 1;
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        color = 2;
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        color = 2;
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        color = 3;
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        color = 3;
      }
      else if (int(id(iaq).state) >= 351) {
        color = 3;
      }
      else {
        color = 4;
      }

      // Time in HH:MM format
      it.strftime(96, 0, id(font1), TextAlign::TOP_RIGHT, "%H:%M", id(esptime).now());

      // Temperature
      if (id(bme680_temperature).has_state()) {
        it.printf(0, 0, id(font1), TextAlign::TOP_LEFT, "%.1f°", id(bme680_temperature).state);
      }

      // Pressure
      if (id(bme680_pressure).has_state()) {
        it.printf(28, 0, id(font1), TextAlign::TOP_LEFT, "%.0f hPa", id(bme680_pressure).state);
      }

      // IAQ classification
      if (id(iaq).has_state()) {
        it.printf(8, 13, id(font1), color == 1 ? id(color_green) : color == 2 ? id(color_orange) : id(color_red), TextAlign::TOP_LEFT, "%s", id(iaq_classification).state.c_str());
      }

      // IAQ identifier
      if (id(iaq).has_state()) {
        it.printf(40, 25, id(font1), TextAlign::TOP_LEFT, "IAQ");
      }

      // IAQ number
      if (id(iaq).has_state()) {
        it.printf(2, 54, id(font2), color == 1 ? id(color_green) : color == 2 ? id(color_orange) : id(color_red), TextAlign::BOTTOM_LEFT, "%3.0f", id(iaq).state);
      }

      // Humidity
      if (id(bme680_humidity).has_state()) {
        it.printf(96, 44, id(font1), TextAlign::BOTTOM_RIGHT, "%.0f %%", id(bme680_humidity).state);
      }

      // CO2
      if (id(scd4x_co2).has_state()) {
        it.printf(96, 54, id(font1), TextAlign::BOTTOM_RIGHT, "%.0f ppm", id(scd4x_co2).state);
      }

      // Particles
      if (id(pmsx003_pm01).has_state()) {
        it.printf(96, 64, id(font1), TextAlign::BOTTOM_RIGHT, "%.0f / %.0f / %.0f ug/m3", id(pmsx003_pm01).state, id(pmsx003_pm25).state, id(pmsx003_pm10).state);
      }

color:
  - id: color_white
    hex: ffffff
  - id: color_green
    hex: 7cfc00
  - id: color_orange
    hex: ffd000
  - id: color_red
    hex: bc3a3a

##### General #####

time:
  - platform: homeassistant
    id: esptime


font:
  - file: gfonts://Inter
    id: font1
    size: 9

  - file: gfonts://Ysabeau # Kanit # Inter
    id: font2
    size: 28


interval:
  - interval: 120s
    then:
      - switch.turn_on: pms_set
      - delay: 20s
      - switch.turn_off: pms_set
  - interval: 1000ms
    then:
      - output.turn_on: statusLED
      - delay: 500ms
      - output.turn_off: statusLED

    